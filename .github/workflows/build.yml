name: Build and Release Workflow

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        rid: [ win-x86, win-x64, linux-x64 ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.x'

      - name: Prepare Publish Directory
        run: mkdir -p publish

      - name: Publish Application
        shell: bash
        run: |
          dotnet publish WebServer/WebServer.csproj -c Release -r ${{ matrix.rid }} /p:SelfContained=true /p:PublishSingleFile=true /p:PublishTrimmed=true /p:DebugType=None /p:DebugSymbols=false -o publish/${{ matrix.rid }}

      - name: Set up Web Directory
        run: |
          mkdir ./publish/${{ matrix.rid }}/web
          echo "<h1>Hello, World, from Raven!</h1>" > ./publish/${{ matrix.rid }}/web/index.html

      - name: Create Release ZIP
        run: |
          cd ./publish/${{ matrix.rid }}
          powershell Compress-Archive -Path * -DestinationPath ../../${{ matrix.rid }}.zip
          cd ../../..

  release:
    needs: build
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get Latest Release
        id: get_latest
        uses: actions/github-script@v6
        with:
          script: |
            const { data: latestRelease } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            core.setOutput("tag", latestRelease.tag_name);
            core.setOutput("version", latestRelease.tag_name.replace(/^v/, ''));

      - name: Generate Release Version
        id: release_version
        run: |
          echo "version=${{ steps.get_latest.outputs.version }}-dev-${GITHUB_SHA:0:7}" >> $GITHUB_ENV
          echo "release_name=Release ${{ steps.get_latest.outputs.version }}-dev-${GITHUB_SHA:0:7}" >> $GITHUB_ENV

      - name: Release Variables
        run: |
          echo "Version: ${{ env.version }}"
          echo "Release Name: ${{ env.release_name }}"

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            win-x86.zip
            win-x64.zip
            linux-x64.zip
          tag: ${{ env.version }}
          name: ${{ env.release_name }}
          draft: false
          prerelease: true